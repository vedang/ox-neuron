* ox-neuron: A Neuron Zettel Markdown back-end for Org Export Engine
:PROPERTIES:
:CREATED:  [2022-01-02 Sun 11:19]
:ID:       36090166-5193-4416-9e23-dac2936e468c
:END:

~ox-neuron~ implements a Markdown back-end for Org exporter. The exported Markdown is compatible with the Neuron Zettelkasten note-taking static site generator (https://neuron.zettel.page/). This exporter also handles ~org-brain~ (https://github.com/Kungsgeten/org-brain) and ~org-roam~ (https://github.com/org-roam/org-roam) relationships in notes. Thus, you can use ~ox-neuron~ to generate beautiful websites for your second brain.

This code builds on top of the ~ox-hugo~ exporter for the Hugo static site generator (https://ox-hugo.scripter.co) and uses a lot of it's code as-is.

* Status of the work
:PROPERTIES:
:CREATED:  [2022-01-02 Sun 11:19]
:ID:       ee4d1c87-0cd0-4813-bf9b-504d4ef62067
:END:

This is a fully working but first-cut version of the exporter. I am able to generate full static sites from my Org Mode notes, but I know the edge-cases that are not handled. The Issues Tab captures all the pending work and edge-cases, so if you have a doubt, please read through it once.

* How to export your Org Mode notes?
:PROPERTIES:
:CREATED:  [2022-01-02 Sun 11:19]
:ID:       467d86a4-460e-42ed-9d1c-345ef5788b5c
:END:

~ox-neuron~ treats any Org Mode heading with the ~:ID~ property as a valid heading for exporting to Neuron. Before starting an export operation, you need to define the variable ~org-neuron-base-dir~ to the file-path where you want to create the Neuron notes. ( Example: =(setq org-neuron-base-dir "/home/vedang/my_neuron_notes/")= ). You also need to ensure that this path already exists. To create your Neuron static site, you need to create a ~neuron.dhall~ file at this path, with the following contents:
#+begin_example
  { plugins = [ "neuronignore", "links", "uptree", "feed", "dirtree" ]}
#+end_example

You are now ready to export your Org Mode notes to Neuron.

The ~ox-neuron~ backend provides two ways to export data in an org-file:
- Everything under the heading at point. (~C-c C-e N N~)
  + If the point is in a valid Neuron heading, export the content to a Neuron file. The filename derives from the heading ~:ID~. For every valid subheading under this heading, export the content to new Neuron files.
- Everything in the file. (~C-c C-e N n~)
  + Export every valid Neuron heading in the file.

If you want to use a specific filename for an exported file, you can do so by setting the EXPORT_FILE_NAME property on the heading. For example, the ~index.md~ file can be created by adding =:EXPORT_FILE_NAME: index= property to the heading.

* On the nature of the generated filenames
:PROPERTIES:
:CREATED:  [2022-08-25 Thu 22:29]
:ID:       0A1883FB-FC11-4180-AFEB-876F28403F89
:END:

~ox-neuron~ always gives the highest priority to the =:EXPORT_FILE_NAME:= property as the filename of the final output file.

If the =:EXPORT_FILE_NAME:= property is not defined, then by default ~ox-neuron~ uses the =:ID:= property to generate the filename. This works perfectly fine with Neuron, since the filename is only used for cross-linking. However, tools like Obsidian have a graph view as the primary way to explore content. These =:ID:= names do not provide sufficient information. In such cases, the user can set the variable ~org-neuron-export-human-readable-filenames~ to true. In this case, the generated filename is a combination of the ~ID~ and the ~slug~ of the post. The ~slug~ is taken from the =:EXPORT_HUGO_SLUG:= property (if defined) or generated from the title of the post.

*NOTE*: If you set ~org-neuron-export-human-readable-filenames~ to ~t~, you will need to export the content */*twice*/* in order to maintain the correct cross-links across the various posts. This is because ~ox-neuron~ has to replace the id-links generated by ~org-mode~ with the human readable ones and it needs two passes to ensure that it has seen all the links.
